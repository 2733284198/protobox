#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'net/http'
require 'uri'

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: protobox [command] [options]"

  opts.separator  ""
  opts.separator  "Commands"
  opts.separator  "     install [url]: install a new configuration from url"
  opts.separator  "     switch [name]: switch the configuration to [name] during vagrant up"
  opts.separator  ""
  opts.separator  "Options"


  opts.on("-v", "--verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end

  opts.on_tail("-h", "--help", "Help") do
    puts optparse
  exit
  end
end

optparse.parse!

# Check required conditions
if ARGV.empty?
  puts optparse
  exit(-1)
end

# Setup vars
action = ARGV[0]
dir = Dir.pwd
protobox_dir = dir + '/.protobox'
boot_file = protobox_dir + '/config'
config_path = 'data/config'
config_dir = dir + '/' + config_path

# Create protobox dir if it doesn't exist
if !Dir.exist?(protobox_dir)
  Dir.mkdir(protobox_dir)
end

# Check if protobox boot file exists, if it doesn't create it here
if !File.file?(boot_file)
  File.open(boot_file, 'w') do |file|
    file.write(config_path + '/common.yml')
  end
end

# Check for boot file
if !File.file?(boot_file)
  puts "Boot file is missing: #{boot_file}\n"
  exit
end

# Process actions
case action
  # Switch between configurations
  when "switch" 
    config_name = ARGV[1]

    if config_name.nil?
        puts "Missing config name: protobox switch [name]"
        exit
    end

    location = config_dir + '/' + config_name + '.yml'

    # Check for file on the system
    if !File.file?(location)
        puts "Configuration file is missing: #{location}"
        exit
    end

    # Write the boot file
    File.open(boot_file, 'w') do |file|
        file.write(config_path + '/' + config_name + '.yml')
    end

    puts "You can now 'vagrant up' using the '#{config_name}' configuration"

  # Install configuration from url
  when "install"
    url_name = ARGV[1]

    if url_name.nil?
      puts "Missing url: protobox install [url]"
      exit(-1)
    end

    # Build http
    uri = URI.parse(url_name.to_s)
    http = Net::HTTP.new(uri.host, uri.port)

    # Build request
    request = Net::HTTP::Get.new(uri.request_uri)
    request["User-Agent"] = "Protobox"

    # Get response
    response = http.request(request)

    # Check for invalid resonse code
    if response.code != "200"
      puts "Could not fetch url: #{url_name}"
      exit(-1)
    end

    # Store response
    body = response.body

    # Convert tabs to spaces
    body = body.gsub!(/\t/, "  ")

    # Check for yaml document starter
    #if !!yaml[/^---/m]
    #  body = "---\n" + body
    #end

    # Validate response
    begin
      yaml_data = YAML.load(body)
    rescue Exception
      puts "Failed parse yaml for #{url_name}: #{$!}"
      #puts "Failed parse yaml for #{url_name}"
      exit(-1)
    end

    # Validate yaml
    if !yaml_data.instance_of(Hash)
      puts "Invalid yaml for #{url_name}"
    end

    # Check for protobox data
    if yaml_data['protobox'].nil? or yaml_data['protobox']['version'].nil? or yaml_data['protobox']['document'].nil?
      puts "Document is missing protobox information"
      exit(-1)
    end

    document = yaml_data['protobox']['document']

    # Check for bad document name
    if document == 'common'
      puts "Invalid protobox document name"
      exit(-1)
    end

    # Save document to file system
    File.open(config_dir + '/' + document + '.yml', 'w') do |file|
      file.write(body)
    end

    # Write the boot file
    File.open(boot_file, 'w') do |file|
      file.write(config_path + '/' + document + '.yml')
    end

    puts "You can now 'vagrant up' using the '#{document}' configuration"

  # Invalid option
  else 
    puts optparse
end
