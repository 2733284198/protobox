- name: debian | set facts
  set_fact: >
    mysql_version="{{ '55' if ansible_lsb.codename != 'lucid' else '51' }}"

- name: debian | installs dependencies
  apt: >
    pkg=python-mysqldb
    state=latest
    update_cache=yes
  sudo: yes

- name: debian | installs mysql packages
  apt: >
    pkg=mysql-server
    state=latest
  sudo: yes
  notify: 
    - mysql-start

#- name: install support packages
#  apt: >
#    pkg={{ item }} 
#    state=installed
#  with_items:
#    - mytop
#    - mysqltuner

#- name: insert iptables rule
#  lineinfile: >
#    dest=/etc/sysconfig/iptables 
#    state=present 
#    regexp="{{ mysql_port }}"
#    insertafter="^:OUTPUT " 
#    line="-A INPUT -p tcp  --dport {{ mysql_port }} -j  ACCEPT"
#  notify: restart iptables

- name: debian | create mysql configuration file
  template: >
    src={{ mysql_version }}/my.cnf.j2
    dest=/etc/mysql/my.cnf
    owner=root
    group=root
    mode=0644
  sudo: yes
  notify:
    - mysql-restart

#- name: debian | remove root user from hosts
#  mysql_user: >
#    name=root
#    host={{ item }}
#    state=absent
#  with_items:
#    - ansible_hostname
#    - ansible_fqdn
#    - 127.0.0.1
#    - ::1
#    #- localhost

# 'localhost' needs to be the last item for idempotency, see
# http://ansible.cc/docs/modules.html#mysql-user
- name: debian | update root password for all hosts
  mysql_user: >
    name=root
    host={{ item }}
    password={{ mysql.root_password|default('') }}
  with_items:
    - ansible_hostname
    - 127.0.0.1
    - ::1
    - localhost

- name: debian | add root credentials
  template: >
    src=common/my.user.cnf.j2
    dest=/root/.my.cnf
    owner=root
    mode=0600
  sudo: yes
  when: ansible_user_id == 'root'
  notify:
    - mysql-restart

- name: debian | add user credentials
  template: >
    src=common/my.user.cnf.j2
    dest=/home/vagrant/.my.cnf
    owner=vagrant
    mode=0600
  sudo: yes
  notify:
    - mysql-restart
  when: protobox_env == 'vagrant'

- name: debian | remove anonymous user
  mysql_user: >
    name=''
    host={{ item }}
    state=absent
  with_items:
    - localhost
    - ansible_fqdn

- name: debian | remove the test database
  mysql_db: >
    name=test 
    state=absent

# TODO : priv={{ item.name }}:{{ item.grant }}
# priv=*.*:ALL host='%'
- name: debian | install all users
  mysql_user: >
    name={{ item.user }}
    password={{ item.password }}
    priv=*.*:{{ item.grant|join(',') }}
    state=present
  with_items: mysql.databases
  when: mysql.databases is defined

- name: debian | check for db existence
  shell: >
    mysql -e "show databases" | fgrep {{ item.name }}
  register: mysql_exist
  with_items: mysql.databases
  ignore_errors: True
  when: mysql.databases is defined

- name: debian | create mysql databases
  mysql_db: >
    name={{ item.name }}
    state=present
  with_items: mysql.databases
  when: mysql.databases is defined

- name: debian | check for mysql files
  stat: >
    path=/vagrant/data/sql/{{ item.name }}.sql
  register: mysql_import_db
  with_items: mysql.databases
  when: protobox_env == 'vagrant' and mysql.databases is defined

- name: debian | import stored mysql databases
  mysql_db: >
    name={{ item.0.name }}
    target=/vagrant/data/sql/{{ item.0.name }}.sql
    state=import
  with_together: 
    - mysql.databases
    - mysql_import_db.results
    - mysql_exist.results
  when: protobox_env == 'vagrant' and mysql.databases is defined and item.1.stat.exists and item.2.rc == 1

- name: debian | import custom mysql databases
  mysql_db: >
    name={{ item.0.name }}
    target={{ item.0.sql_file|default('') }}
    state=import
  with_together: 
    - mysql.databases
    - mysql_exist.results
  when: mysql.databases is defined and item.0.sql_file is defined and item.0.sql_file != '' and item.1.rc == 1
