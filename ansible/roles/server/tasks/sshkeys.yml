- name: sshkeys | set facts
  set_fact: >
    sshkeys_path="{{ '/root' if protobox_env == 'vagrant' else '/home/' ~ ansible_user_id }}"
    sshkeys_user="{{ ansible_user_id }}"

# make sure ssh config exists
- name: sshkeys | ensure directory exists
  file: >
    path=/{{ sshkeys_path }}/.ssh
    state=directory
    owner={{ sshkeys_user }}
    group={{ sshkeys_user }}
    mode=0644

# TODO : configs later could replace this, so we need to create the ssh/config
# so that later in the steps we can concat onto it

- name: sshkeys | ensure config exists
  template: >
    src=ssh_config.j2 
    dest={{ sshkeys_path }}/.ssh/config 
    owner={{ sshkeys_user }} 
    group={{ sshkeys_user }} 
    mode=0644
  notify:
    - ssh-restart

## SSH Authorized Keys

#- name: sshkeys | check for files
#  stat: >
#    path={{ item.file }}
#  with_items: server.ssh.authorized_keys
#  register: sshkeys_files
#  when: server.ssh.authorized_keys is defined and item.file is defined

#- debug: >
#    msg="{{ item.0.name }} - {{ item.1.stat.exists }}"
#  with_together: 
#    - server.ssh.authorized_keys
#    - sshkeys_files.results

#key={{ item.file|default(lookup('file', sshkeys_path + '/.ssh/id_rsa.pub')) }}
- name: sshkeys | add authorized keys from files
  authorized_key: >
    user={{ item.user|default(sshkeys_user) }}
    key="{{ lookup('file', item.file) }}"
    state=present
  sudo: yes
  with_items: server.ssh.authorized_keys
  when: server.ssh.authorized_keys is defined and item.file is defined

- name: sshkeys | add authorized key entries
  authorized_key: >
    user={{ item.user|default(sshkeys_user) }}
    key="{{ item.key }}"
    state=present
  sudo: yes
  with_items: server.ssh.authorized_keys
  when: server.ssh.authorized_keys is defined and item.key is defined

## SSH Private Keys

# copy key files into place
- name: sshkeys | add private keys from files
  shell: >
    cp {{ item.file }} {{ sshkeys_path }}/.ssh/{{ item.file|basename }} && 
    chmod 600 {{ sshkeys_path }}/.ssh/{{ item.file|basename }}
  with_items: server.ssh.private_keys
  sudo: yes
  when: server.ssh.private_keys is defined and item.file is defined

# copy key entries into place
- name: sshkeys | add private keys entries
  shell: >
    echo -e "{{ item.entry }}" >> {{ sshkeys_path }}/.ssh/{{ item.entry|md5 }} &&
    chmod 600 {{ sshkeys_path }}/.ssh/{{ item.entry|md5 }} &&
    echo -e "\nhost *\n\tIdentityFile '{{ sshkeys_path }}/.ssh/{{ item.entry|md5 }}'" >> {{ sshkeys_path }}/.ssh/config
    creates={{ sshkeys_path }}/.ssh/{{ item.entry|md5 }}
  with_items: server.ssh.private_keys
  sudo: yes
  when: server.ssh.private_keys is defined and item.entry is defined and item.entry

## Filesystem 

- name: sshkeys | copy ssh keys
  command: >
    cp {{ item }} {{ sshkeys_path }}/.ssh/{{ item|basename }}
  with_fileglob: /vagrant/data/ssh/*
  sudo: yes
  when: protobox_env == 'vagrant' and item != '.gitignore'

- name: sshkeys | copy ssh keys
  command: >
    chmod 600 {{ sshkeys_path }}/.ssh/{{ item|basename }}
  with_fileglob: /vagrant/data/ssh/*
  sudo: yes
  when: protobox_env == 'vagrant' and item != '.gitignore'
